name: ratelimitrec
version: 0.1
input_params:



- name: timeframe
  type: int
  note: time in seconds
# 180

- name: startdate
  type: str
  note: 'format: 2020-10-20 19:55:47.061021+00'

- name: enddate
  type: str
  note: 'format: 2020-10-20 19:55:47.061021+00'

- name: urlmap
  type: str
  note: 'URLMap ID (site)'
  sql_example: "upstreamcluster = 'target_site'"

- name: urlmapentry
  type: str
  note: 'url entry id (path)'

- name: gen_include
  type: str
  note: 'conditional block for for include area'
  sql_example: " curiefense  -> 'attrs' -> 'tags' ->> 'asn:65551' = '1'  AND     curiefense  -> 'attrs' ->> 'ip' = '192.0.2.0' "

- name: gen_exclude
  type: str

  note: 'conditional block for for exclude area'
  sql_example: " NOT  curiefense  -> 'attrs' -> 'tags' ->> 'asn:65551' = '1' AND   NOT curiefense  -> 'attrs' ->> 'ip' = 'example'  "

- name: gen_key_composition
  type: str
  note: ' key composition '
  sql_example: " concat((curiefense ->'attrs'->>'ip') ,(curiefense ->'headers'->>'user-agent')) as key_composition  "

sql_template: |

  SELECT 
  ratelimit,
  stddev,
  glb_max_req_number,
  glb_min_req_number,
  glb_avg_req_number,
  round(quant_75 + 1.5*(quant_75 - quant_25)) as recommendation
  FROM
  (SELECT

  PERCENTILE_CONT (0.75) within group (order by req_number) as quant_75,
  PERCENTILE_CONT (0.25) within group (order by req_number) as quant_25,
  stddev,
  ratelimit,
  glb_max_req_number, 
  glb_min_req_number,
  glb_avg_req_number
  FROM
  (SELECT *,

  round(min(req_number) over (PARTITION BY  ratelimit)) AS glb_min_req_number,
  round(max(req_number) over (PARTITION BY  ratelimit)) AS glb_max_req_number,
  round(AVG(req_number) over (PARTITION BY  ratelimit)) AS glb_avg_req_number,
  round(STDDEV(req_number)  over (PARTITION BY  ratelimit)) as stddev

  FROM
  (SELECT
  (count (*)) as req_number ,
  key_composition,
  timestamp,
  ratelimit
  FROM

  (SELECT *,
  (date_trunc('minute', (min(starttime) over (partition by ratelimit))) ) + (time_interval * interval ' {timeframe} second') as timestamp

  FROM ( SELECT * ,
  round((((extract(epoch from starttime)) - (extract(epoch from (min(starttime) over (partition by ratelimit))))))/{timeframe}) as time_interval , --- the timerframe is dynemic param
  extract(epoch from (min(starttime) over (partition by ratelimit))) as min_time

  FROM
  (SELECT
  starttime,
  'ratelimit' as ratelimit,
  {gen_key_composition} as key_composition

  FROM logs

  WHERE

  starttime BETWEEN '{startdate}' AND '{enddate}'


  AND path ~ '{urlmapentry}'
  AND   upstreamcluster = '{urlmap}' 
   {gen_include} 
   {gen_exclude}
  )
  as Q1)
  as Q2)
  as Q3 group by key_composition, timestamp,ratelimit
  order by timestamp asc) as Q4 group by 1,2,3,4)  
  as Q5 group by 3,4,5,6,7)
  as Q6
